---
// Define interfaces for TypeScript
export interface Section {
  id: string;
  type: string;
  [key: string]: any;
}

// Initial state variables
let initialIsOpen = false;
let initialSection: Section | null = null;
---

<div id="delete-section-modal" class="fixed inset-0 z-50 bg-black bg-opacity-50 flex items-center justify-center" style="display: none;">
  <div class="bg-white rounded-lg shadow-lg max-w-md w-full p-6">
    <h2 class="text-xl font-semibold mb-4 text-red-600">Delete Section</h2>
    <p class="text-gray-700 mb-6">
      Are you sure you want to delete this section (<strong id="section-type"></strong>)?
    </p>
    <div class="flex justify-end gap-2">
      <button
        id="cancel-button"
        class="text-gray-500 hover:text-black px-4 py-2"
      >
        Cancel
      </button>
      <button
        id="delete-button"
        class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded"
      >
        Delete
      </button>
    </div>
  </div>
</div>

<script>
// TypeScript interface for section
interface Section {
  id: string;
  type: string;
  [key: string]: any;
}

// State management
let isOpen = false;
let section: Section | null = null;
let isDeleting = false;

// DOM elements
const modal = document.getElementById('delete-section-modal');
const sectionTypeEl = document.getElementById('section-type');
const cancelButton = document.getElementById('cancel-button');
const deleteButton = document.getElementById('delete-button');

// Utility function to show toast notifications
function showToast(message: string, type: 'success' | 'error' = 'success') {
  const toastContainer = document.getElementById('toast-container');
  
  // If no toast container found, skip showing toast to avoid errors
  if (!toastContainer) {
    console.warn('Toast container not found, cannot show toast');
    return;
  }
  
  // Clear existing toasts to avoid duplicates
  toastContainer.innerHTML = '';
  
  const bgColor = type === 'success' ? 'bg-green-500' : 'bg-red-500';
  const toast = document.createElement('div');
  toast.className = `${bgColor} text-white px-4 py-2 rounded shadow`;
  toast.innerText = message;
  
  toastContainer.appendChild(toast);
  
  setTimeout(() => {
    toast.classList.add('opacity-0');
    setTimeout(() => toast.remove(), 500);
  }, 3000);
}

// Event handler to open the modal
function openModal(e: CustomEvent) {
  section = e.detail as Section;
  if (!section || !section.id) return;
  
  // Update UI
  if (sectionTypeEl && section.type) {
    sectionTypeEl.textContent = section.type;
  }
  
  // Show modal
  if (modal) {
    isOpen = true;
    modal.style.display = 'flex';
  }
}

// Event handler to close the modal
function closeModal() {
  if (modal) {
    isOpen = false;
    modal.style.display = 'none';
  }
  section = null;
  isDeleting = false;
  
  // Reset UI state
  updateButtonState();
}

// Handle delete action
async function handleDelete() {
  if (!section || isDeleting) return;
  isDeleting = true;
  updateButtonState();

  try {
    const res = await fetch(`/api/sections/${section.id}`, { method: 'DELETE' });
    if (res.ok) {
      showToast('Section deleted successfully.', 'success');
      setTimeout(() => window.location.reload(), 1000);
    } else {
      const err = await res.json();
      showToast(err.message || 'Failed to delete section.', 'error');
    }
  } catch (err) {
    console.error('Delete section failed:', err);
    showToast('Unexpected error', 'error');
  } finally {
    isDeleting = false;
    closeModal();
  }
}

// Update button disabled state
function updateButtonState() {
  if (deleteButton) {
    (deleteButton as HTMLButtonElement).disabled = isDeleting;
    deleteButton.textContent = isDeleting ? 'Deleting...' : 'Delete';
  }
  
  if (cancelButton) {
    (cancelButton as HTMLButtonElement).disabled = isDeleting;
  }
}

// Register event listeners
document.addEventListener('DOMContentLoaded', () => {
  // Custom event listener
  document.addEventListener('open-delete-section-modal', ((e: Event) => openModal(e as CustomEvent)) as EventListener);
  
  // Button listeners
  if (cancelButton) {
    cancelButton.addEventListener('click', closeModal);
  }
  
  if (deleteButton) {
    deleteButton.addEventListener('click', handleDelete);
  }
});
</script>
