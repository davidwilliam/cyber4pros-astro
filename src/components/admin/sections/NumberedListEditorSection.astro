---
import FormControls from '~/components/admin/common/FormControls.astro';

// Define interfaces
export interface Item {
  title: string;
  description: string;
}

export interface Props {
  data: {
    id: string;
    title?: string;
    subtitle?: string;
    items?: Item[];
  };
}

const { data } = Astro.props;

// Initialize data with defaults
const initialState = {
  id: data.id,
  title: data.title || '',
  subtitle: data.subtitle || '',
  items: data.items || []
};
---

<section id={data.id} class="border p-6 rounded-lg shadow bg-white space-y-4">
  <h2 class="text-xl font-semibold mb-4">Numbered List</h2>
  
  <!-- Tabs -->
  <div class="flex space-x-4 border-b mb-4">
    {['content', 'items'].map((tabKey) => (
      <button
        type="button"
        data-tab={tabKey}
        class={`pb-2 ${tabKey === 'content' ? 'border-b-2 border-indigo-600 font-semibold' : 'text-gray-500'}`}
        onclick={`switchTab('${tabKey}')`}
      >
        {tabKey.charAt(0).toUpperCase() + tabKey.slice(1)}
      </button>
    ))}
  </div>

  <!-- Content Tab -->
  <div id="content-tab" class="space-y-3">
    <div class="space-y-1">
      <label class="block text-sm font-medium text-gray-700">Title</label>
      <input
        type="text"
        id="title-input"
        value={initialState.title}
        class="w-full border p-2 rounded"
      />
    </div>
    
    <div class="space-y-1">
      <label class="block text-sm font-medium text-gray-700">Subtitle</label>
      <textarea
        id="subtitle-input"
        rows={2}
        class="w-full border p-2 rounded"
      >{initialState.subtitle}</textarea>
    </div>
  </div>

  <!-- Items Tab -->
  <div id="items-tab" class="space-y-4 hidden">
    <div id="items-container">
      {initialState.items.map((item, index) => (
        <div class="border p-4 rounded space-y-2 bg-gray-50 mb-4" data-index={index}>
          <div class="space-y-1">
            <label class="block text-sm font-medium text-gray-700">Title</label>
            <input
              type="text"
              value={item.title}
              class="w-full border p-2 rounded item-title"
              data-index={index}
            />
          </div>
          
          <div class="space-y-1">
            <label class="block text-sm font-medium text-gray-700">Description</label>
            <textarea
              rows={2}
              class="w-full border p-2 rounded item-description"
              data-index={index}
            >{item.description}</textarea>
          </div>
          
          <div class="text-right">
            <button
              type="button"
              class="text-red-600 text-sm hover:underline remove-item"
              data-index={index}
            >
              Remove
            </button>
          </div>
        </div>
      ))}
    </div>
    
    <button
      type="button"
      id="add-item-btn"
      class="text-indigo-600 text-sm hover:underline"
    >
      + Add item
    </button>
  </div>

  <div class="pt-6 border-t">
    <button
      type="button"
      id="save-button"
      class="bg-indigo-600 text-white px-4 py-2 rounded hover:bg-indigo-700"
    >
      Save Changes
    </button>
  </div>
</section>

<script define:vars={{ initialState }}>
  // State management
  let activeTab = 'content';
  let formState = { ...initialState };
  let isSaving = false;
  
  // DOM Elements
  const contentTab = document.getElementById('content-tab');
  const itemsTab = document.getElementById('items-tab');
  const titleInput = document.getElementById('title-input');
  const subtitleInput = document.getElementById('subtitle-input');
  const itemsContainer = document.getElementById('items-container');
  const addItemBtn = document.getElementById('add-item-btn');
  const saveButton = document.getElementById('save-button');
  
  // Add event listeners
  document.querySelectorAll('[data-tab]').forEach(tab => {
    tab.addEventListener('click', (e) => {
      const tabName = tab.getAttribute('data-tab');
      if (tabName) switchTab(tabName);
    });
  });
  
  if (titleInput) {
    titleInput.addEventListener('input', (e) => {
      formState.title = e.target.value;
    });
  }
  
  if (subtitleInput) {
    subtitleInput.addEventListener('input', (e) => {
      formState.subtitle = e.target.value;
    });
  }
  
  if (addItemBtn) {
    addItemBtn.addEventListener('click', () => {
      addItem();
    });
  }
  
  if (saveButton) {
    saveButton.addEventListener('click', () => {
      handleSave();
    });
  }
  
  // Setup item event listeners
  setupItemEventListeners();
  
  // Switch between tabs
  function switchTab(tab) {
    activeTab = tab;
    
    if (contentTab) {
      contentTab.classList.toggle('hidden', tab !== 'content');
    }
    
    if (itemsTab) {
      itemsTab.classList.toggle('hidden', tab !== 'items');
    }
    
    document.querySelectorAll('[data-tab]').forEach(btn => {
      const btnTab = btn.getAttribute('data-tab');
      const isActive = btnTab === tab;
      
      btn.classList.toggle('border-b-2', isActive);
      btn.classList.toggle('border-indigo-600', isActive);
      btn.classList.toggle('font-semibold', isActive);
      btn.classList.toggle('text-gray-500', !isActive);
    });
  }
  
  // Add a new item
  function addItem() {
    formState.items = [...formState.items, { title: '', description: '' }];
    updateItemsUI();
  }
  
  // Remove an item
  function removeItem(index) {
    formState.items = formState.items.filter((_, i) => i !== index);
    updateItemsUI();
  }
  
  // Update item value
  function updateItem(index, field, value) {
    formState.items = formState.items.map((item, i) => {
      if (i === index) {
        return { ...item, [field]: value };
      }
      return item;
    });
  }
  
  // Update the items UI
  function updateItemsUI() {
    if (!itemsContainer) return;
    
    itemsContainer.innerHTML = '';
    
    formState.items.forEach((item, index) => {
      const itemElement = document.createElement('div');
      itemElement.className = 'border p-4 rounded space-y-2 bg-gray-50 mb-4';
      itemElement.dataset.index = index.toString();
      
      itemElement.innerHTML = `
        <div class="space-y-1">
          <label class="block text-sm font-medium text-gray-700">Title</label>
          <input
            type="text"
            value="${item.title}"
            class="w-full border p-2 rounded item-title"
            data-index="${index}"
          />
        </div>
        
        <div class="space-y-1">
          <label class="block text-sm font-medium text-gray-700">Description</label>
          <textarea
            rows="2"
            class="w-full border p-2 rounded item-description"
            data-index="${index}"
          >${item.description}</textarea>
        </div>
        
        <div class="text-right">
          <button
            type="button"
            class="text-red-600 text-sm hover:underline remove-item"
            data-index="${index}"
          >
            Remove
          </button>
        </div>
      `;
      
      itemsContainer.appendChild(itemElement);
    });
    
    setupItemEventListeners();
  }
  
  // Setup event listeners for dynamically created items
  function setupItemEventListeners() {
    // Title inputs
    document.querySelectorAll('.item-title').forEach(input => {
      input.addEventListener('input', (e) => {
        const index = parseInt(e.target.dataset.index, 10);
        updateItem(index, 'title', e.target.value);
      });
    });
    
    // Description textareas
    document.querySelectorAll('.item-description').forEach(textarea => {
      textarea.addEventListener('input', (e) => {
        const index = parseInt(e.target.dataset.index, 10);
        updateItem(index, 'description', e.target.value);
      });
    });
    
    // Remove buttons
    document.querySelectorAll('.remove-item').forEach(button => {
      button.addEventListener('click', (e) => {
        const index = parseInt(e.target.dataset.index, 10);
        removeItem(index);
      });
    });
  }
  
  // Utility function to show toast notifications
  function showToast(message, type = 'success') {
    const toast = document.createElement('div');
    toast.className = `fixed bottom-4 right-4 ${type === 'success' ? 'bg-green-500' : 'bg-red-500'} text-white px-4 py-2 rounded shadow-lg z-50`;
    toast.textContent = message;
    document.body.appendChild(toast);
    setTimeout(() => toast.remove(), 3000);
  }
  
  // Save the section
  async function handleSave() {
    if (isSaving) return;
    isSaving = true;
    
    if (saveButton) {
      saveButton.textContent = 'Saving...';
      saveButton.disabled = true;
    }
    
    try {
      const response = await fetch('/api/sections', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          id: initialState.id,
          title: formState.title,
          subtitle: formState.subtitle,
          items: formState.items
        }),
      });
      
      if (!response.ok) {
        throw new Error('Failed to save changes');
      }
      
      showToast('Changes saved successfully!', 'success');
    } catch (error) {
      console.error('Save error:', error);
      showToast(error instanceof Error ? error.message : 'Failed to save changes', 'error');
    } finally {
      isSaving = false;
      if (saveButton) {
        saveButton.textContent = 'Save Changes';
        saveButton.disabled = false;
      }
    }
  }
  
  // Initialize by selecting the content tab
  window.switchTab = switchTab;
  switchTab('content');
</script> 