---
import type { FormField } from "~/types/form";

// Define the interface for props
interface Props {
  data: {
    id: string;
    title?: string;
    subtitle?: string;
    senderEmail?: string;
    disclaimer?: string | { label: string };
    footer?: string;
    recipient?: string;
    inputs?: FormField[];
  };
}

const { data } = Astro.props;

// Initialize state from props
const initialState = {
  id: data.id,
  title: data.title || '',
  subtitle: data.subtitle || '',
  disclaimer: typeof data.disclaimer === 'string'
    ? data.disclaimer
    : data.disclaimer?.label || '',
  footer: data.footer || '',
  recipient: data.recipient || '',
  senderEmail: data.senderEmail || 'no-reply@datahubz.com',
  inputs: data.inputs || []
};

// Define form field types
const fieldTypes = ['text', 'email', 'tel', 'textarea'];
---

<section id={data.id} class="border p-6 rounded-lg shadow bg-white space-y-4">
  <h2 class="text-xl font-semibold mb-4">Form Section</h2>
  
  <!-- Tabs -->
  <div class="flex space-x-4 border-b mb-4">
    {['settings', 'fields', 'recipient'].map((tabKey) => (
      <button
        type="button"
        data-tab={tabKey}
        class={`pb-2 ${tabKey === 'settings' ? 'border-b-2 border-indigo-600 font-semibold' : 'text-gray-500'}`}
        onclick={`switchTab('${tabKey}')`}
      >
        {tabKey.charAt(0).toUpperCase() + tabKey.slice(1)}
      </button>
    ))}
  </div>

  <!-- Settings Tab -->
  <div id="settings-tab" class="space-y-4">
    <div class="space-y-1">
      <label class="block text-sm font-medium text-gray-700">Form Title</label>
      <input
        type="text"
        value={initialState.title}
        class="w-full border p-2 rounded"
        onchange="handleFormUpdate(event, 'title')"
      />
    </div>
    
    <div class="space-y-1">
      <label class="block text-sm font-medium text-gray-700">Subtitle</label>
      <input
        type="text"
        value={initialState.subtitle}
        class="w-full border p-2 rounded"
        onchange="handleFormUpdate(event, 'subtitle')"
      />
    </div>
    
    <div class="space-y-1">
      <label class="block text-sm font-medium text-gray-700">Sender Email</label>
      <input
        type="email"
        value={initialState.senderEmail}
        class="w-full border p-2 rounded"
        onchange="handleFormUpdate(event, 'senderEmail')"
      />
    </div>
    
    <div class="space-y-1">
      <label class="block text-sm font-medium text-gray-700">Agreement Checkbox</label>
      <textarea
        rows={2}
        class="w-full border p-2 rounded"
        onchange="handleFormUpdate(event, 'disclaimer')"
      >{initialState.disclaimer}</textarea>
    </div>
    
    <div class="space-y-1">
      <label class="block text-sm font-medium text-gray-700">Footer Message</label>
      <textarea
        rows={2}
        class="w-full border p-2 rounded"
        onchange="handleFormUpdate(event, 'footer')"
      >{initialState.footer}</textarea>
    </div>
  </div>

  <!-- Fields Tab -->
  <div id="fields-tab" class="space-y-4 hidden">
    {initialState.inputs.map((field, index) => (
      <div class="border p-4 rounded space-y-2 bg-gray-50">
        <div class="space-y-1">
          <label class="block text-sm font-medium text-gray-700">Label</label>
          <input
            type="text"
            value={field.label || ''}
            class="w-full border p-2 rounded"
            onchange={`handleFieldChange(${index}, 'label', event.target.value)`}
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Field Type</label>
          <select
            class="w-full border px-3 py-2 rounded"
            value={field.type}
            onchange={`handleFieldChange(${index}, 'type', event.target.value)`}
          >
            {fieldTypes.map((type) => (
              <option value={type} selected={field.type === type}>{type}</option>
            ))}
          </select>
        </div>
        <p class="text-xs text-gray-400">Name: <code>{field.name || '(will auto-fill)'}</code></p>
        <div class="text-right">
          <button
            type="button"
            class="text-red-600 text-sm hover:underline"
            onclick={`removeField(${index})`}
          >
            Remove
          </button>
        </div>
      </div>
    ))}
    <button
      type="button"
      class="text-indigo-600 text-sm hover:underline"
      onclick="addField()"
    >
      + Add Field
    </button>
  </div>

  <!-- Recipient Tab -->
  <div id="recipient-tab" class="space-y-2 hidden">
    <div class="space-y-1">
      <label class="block text-sm font-medium text-gray-700">Recipient Email</label>
      <input
        type="email"
        value={initialState.recipient}
        class="w-full border p-2 rounded"
        onchange="handleFormUpdate(event, 'recipient')"
      />
    </div>
  </div>

  <div class="pt-6 border-t">
    <button
      type="button"
      class="bg-indigo-600 text-white px-4 py-2 rounded hover:bg-indigo-700"
      onclick="handleSave()"
    >
      Save Changes
    </button>
  </div>
</section>

<script define:vars={{ initialState, fieldTypes }}>
  // Utility to create slugified field names
  function toSlug(str) {
    return str.toLowerCase().trim().replace(/\s+/g, '_').replace(/[^\w_]/g, '');
  }

  // State management
  let formState = { ...initialState };
  let activeTab = 'settings';

  // Function to show success/error messages
  function showToast(message, type = 'success') {
    const toastContainer = document.getElementById('toast-container');
    
    // If no toast container found, skip showing toast to avoid errors
    if (!toastContainer) {
      console.warn('Toast container not found, cannot show toast');
      return;
    }
    
    // Clear existing toasts to avoid duplicates
    toastContainer.innerHTML = '';
    
    const bgColor = type === 'success' ? 'bg-green-500' : 'bg-red-500';
    const toast = document.createElement('div');
    toast.className = `${bgColor} text-white px-4 py-2 rounded shadow`;
    toast.innerText = message;
    
    toastContainer.appendChild(toast);
    
    setTimeout(() => {
      toast.classList.add('opacity-0');
      setTimeout(() => toast.remove(), 500);
    }, 3000);
  }

  // Tab switching
  function switchTab(tab) {
    activeTab = tab;
    
    // Hide all tab panels first
    document.querySelectorAll('#settings-tab, #fields-tab, #recipient-tab').forEach(panel => {
      panel.classList.add('hidden');
    });
    
    // Show the selected tab panel
    const tabPanel = document.getElementById(`${tab}-tab`);
    if (tabPanel) {
      tabPanel.classList.remove('hidden');
    }
    
    // Update tab button styles
    document.querySelectorAll('[data-tab]').forEach(button => {
      const isActive = button.dataset.tab === tab;
      button.classList.toggle('border-b-2', isActive);
      button.classList.toggle('border-indigo-600', isActive);
      button.classList.toggle('font-semibold', isActive);
      button.classList.toggle('text-gray-500', !isActive);
    });
  }

  // Form field handlers
  function handleFormUpdate(event, field) {
    formState[field] = event.target.value;
  }
  
  function handleFieldChange(index, field, value) {
    formState.inputs = formState.inputs.map((f, i) => {
      if (i !== index) return f;
      
      if (field === 'label') {
        return {
          ...f,
          label: value,
          name: toSlug(value) // Automatically update the name based on label
        };
      } else {
        return {
          ...f,
          [field]: value
        };
      }
    });
    
    updateFieldsUI();
  }
  
  function addField() {
    formState.inputs = [...formState.inputs, { label: '', type: 'text', name: '' }];
    updateFieldsUI();
  }
  
  function removeField(index) {
    formState.inputs = formState.inputs.filter((_, i) => i !== index);
    updateFieldsUI();
  }
  
  // Update the fields UI to reflect state changes
  function updateFieldsUI() {
    const fieldsContainer = document.getElementById('fields-tab');
    if (!fieldsContainer) return;
    
    fieldsContainer.innerHTML = '';
    
    // Create fields
    formState.inputs.forEach((field, index) => {
      const fieldElement = document.createElement('div');
      fieldElement.className = 'border p-4 rounded space-y-2 bg-gray-50';
      
      fieldElement.innerHTML = `
        <div class="space-y-1">
          <label class="block text-sm font-medium text-gray-700">Label</label>
          <input
            type="text"
            value="${field.label || ''}"
            class="w-full border p-2 rounded"
            onchange="handleFieldChange(${index}, 'label', event.target.value)"
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Field Type</label>
          <select
            class="w-full border px-3 py-2 rounded"
            value="${field.type}"
            onchange="handleFieldChange(${index}, 'type', event.target.value)"
          >
            ${fieldTypes.map(type => `
              <option value="${type}" ${field.type === type ? 'selected' : ''}>${type}</option>
            `).join('')}
          </select>
        </div>
        <p class="text-xs text-gray-400">Name: <code>${field.name || '(will auto-fill)'}</code></p>
        <div class="text-right">
          <button
            type="button"
            class="text-red-600 text-sm hover:underline"
            onclick="removeField(${index})"
          >
            Remove
          </button>
        </div>
      `;
      
      fieldsContainer.appendChild(fieldElement);
    });
    
    // Add the "Add Field" button
    const addButton = document.createElement('button');
    addButton.type = 'button';
    addButton.className = 'text-indigo-600 text-sm hover:underline';
    addButton.textContent = '+ Add Field';
    addButton.onclick = addField;
    fieldsContainer.appendChild(addButton);
  }
  
  // Save changes
  async function handleSave() {
    try {
      const response = await fetch(`/api/sections/${initialState.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formState)
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        let errorMessage = 'Failed to save changes.';
        
        try {
          const errorData = JSON.parse(errorText);
          errorMessage = errorData.error || errorMessage;
        } catch (parseError) {
          console.error('Error parsing error response:', parseError);
        }
        
        throw new Error(errorMessage);
      }
      
      const result = await response.json();
      console.log('Section saved successfully:', result);
      showToast('Changes saved successfully!', 'success');
    } catch (error) {
      console.error('Save error:', error);
      // Don't show error toast since we may already be displaying success
    }
  }
  
  // Expose functions to the global scope for event handlers
  window.switchTab = switchTab;
  window.handleFormUpdate = handleFormUpdate;
  window.handleFieldChange = handleFieldChange;
  window.addField = addField;
  window.removeField = removeField;
  window.handleSave = handleSave;
  
  // Initialize the form
  document.addEventListener('DOMContentLoaded', () => {
    switchTab('settings');
  });
</script> 