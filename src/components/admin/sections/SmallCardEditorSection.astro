---
import { showToast } from '~/utils/toast';
import { saveSection } from '~/utils/editor';

// Define interfaces for TypeScript
export interface CardItem {
  title: string;
  description: string;
}

export interface Props {
  data: {
    id: string;
    title?: string;
    tagline?: string;
    items?: CardItem[];
  };
}

const { data } = Astro.props;

// Initialize data with defaults for client script
const initialState = {
  id: data.id,
  title: data.title || '',
  tagline: data.tagline || '',
  items: Array.isArray(data.items) ? data.items : []
};

// Default active tab
const initialTab = 'content';
---

<section id={data.id} class="border p-6 rounded-lg shadow bg-white space-y-4">
  <h2 class="text-xl font-semibold mb-4">Small Card Section</h2>
  
  <!-- Tab navigation -->
  <div id="tabs" class="flex border-b space-x-4">
    <button
      type="button"
      class="tab-btn pb-2 px-4"
      data-tab="content"
    >
      Content
    </button>
    <button
      type="button"
      class="tab-btn pb-2 px-4" 
      data-tab="items"
    >
      Items
    </button>
  </div>

  <!-- Content tab -->
  <div id="content-tab" class="tab-content space-y-3" style="display: none;">
    <div class="space-y-1">
      <label class="block text-sm font-medium text-gray-700">Tagline</label>
      <input 
        type="text" 
        id="tagline-input"
        value={initialState.tagline} 
        class="w-full border p-2 rounded"
      />
    </div>
    
    <div class="space-y-1">
      <label class="block text-sm font-medium text-gray-700">Title</label>
      <input 
        type="text" 
        id="title-input"
        value={initialState.title} 
        class="w-full border p-2 rounded"
      />
    </div>
  </div>

  <!-- Items tab -->
  <div id="items-tab" class="tab-content space-y-4" style="display: none;">
    <div id="items-container">
      {initialState.items.map((item, index) => (
        <div class="border p-4 rounded space-y-2 bg-gray-50 mb-4" data-index={index}>
          <div class="space-y-1">
            <label class="block text-sm font-medium text-gray-700">Title</label>
            <input
              type="text"
              value={item.title}
              class="w-full border p-2 rounded item-title"
              data-index={index}
            />
          </div>
          
          <div class="space-y-1">
            <label class="block text-sm font-medium text-gray-700">Description</label>
            <input
              type="text"
              value={item.description}
              class="w-full border p-2 rounded item-description"
              data-index={index}
            />
          </div>
          
          <div class="text-right">
            <button
              type="button"
              class="text-red-600 text-sm hover:underline remove-item"
              data-index={index}
            >
              Remove
            </button>
          </div>
        </div>
      ))}
    </div>
    
    <button
      type="button"
      id="add-item-btn"
      class="text-indigo-600 text-sm hover:underline"
    >
      + Add item
    </button>
  </div>

  <div class="pt-6 border-t">
    <button
      type="button"
      id="save-button"
      class="bg-indigo-600 text-white px-4 py-2 rounded hover:bg-indigo-700"
    >
      Save Changes
    </button>
  </div>
</section>

<script define:vars={{ initialState, initialTab }}>
  // State management
  let formState = { ...initialState };
  let activeTab = initialTab;
  let isSaving = false;
  
  // DOM Elements
  const tabButtons = document.querySelectorAll('.tab-btn');
  const tabContents = document.querySelectorAll('.tab-content');
  const titleInput = document.getElementById('title-input');
  const taglineInput = document.getElementById('tagline-input');
  const itemsContainer = document.getElementById('items-container');
  const addItemBtn = document.getElementById('add-item-btn');
  const saveButton = document.getElementById('save-button');
  
  // Initialize
  function init() {
    // Set active tab
    setActiveTab(activeTab);
    
    // Add event listeners to tab buttons
    tabButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        setActiveTab(btn.dataset.tab);
      });
    });
    
    // Input fields for title and tagline
    if (titleInput) {
      titleInput.addEventListener('input', (e) => {
        formState.title = e.target.value;
      });
    }
    
    if (taglineInput) {
      taglineInput.addEventListener('input', (e) => {
        formState.tagline = e.target.value;
      });
    }
    
    // Add item button
    if (addItemBtn) {
      addItemBtn.addEventListener('click', addItem);
    }
    
    // Save button
    if (saveButton) {
      saveButton.addEventListener('click', handleSave);
    }
    
    // Setup initial item event listeners
    setupItemEventListeners();
  }
  
  // Set active tab
  function setActiveTab(tabId) {
    activeTab = tabId;
    
    // Update tab button styles
    tabButtons.forEach(btn => {
      if (btn.dataset.tab === tabId) {
        btn.classList.add('border-b-2', 'border-indigo-600', 'font-semibold');
      } else {
        btn.classList.remove('border-b-2', 'border-indigo-600', 'font-semibold');
      }
    });
    
    // Show/hide tab contents
    tabContents.forEach(content => {
      const contentId = content.id;
      if (contentId === `${tabId}-tab`) {
        content.style.display = 'block';
      } else {
        content.style.display = 'none';
      }
    });
  }
  
  // Handle saving
  function handleSave() {
    if (isSaving) return;
    isSaving = true;
    updateSaveButtonUI();
    
    // Import functions dynamically
    import('~/utils/toast').then(({ showToast }) => {
      import('~/utils/editor').then(({ saveSection }) => {
        saveSection(
          formState.id,
          { 
            title: formState.title, 
            tagline: formState.tagline, 
            items: formState.items 
          },
          () => {
            showToast('Changes saved successfully!', 'success');
            isSaving = false;
            updateSaveButtonUI();
          },
          (errMsg) => {
            showToast(errMsg instanceof Error ? errMsg.message : errMsg, 'error');
            isSaving = false;
            updateSaveButtonUI();
          }
        );
      });
    });
  }
  
  // Add a new item
  function addItem() {
    formState.items = [...formState.items, { title: '', description: '' }];
    updateItemsUI();
  }
  
  // Update an item
  function updateItem(index, field, value) {
    formState.items = formState.items.map((item, i) => {
      if (i === parseInt(index, 10)) {
        return { ...item, [field]: value };
      }
      return item;
    });
  }
  
  // Remove an item
  function removeItem(index) {
    formState.items = formState.items.filter((_, i) => i !== parseInt(index, 10));
    updateItemsUI();
  }
  
  // Update the items UI
  function updateItemsUI() {
    if (!itemsContainer) return;
    
    itemsContainer.innerHTML = '';
    
    formState.items.forEach((item, index) => {
      const itemElement = document.createElement('div');
      itemElement.className = 'border p-4 rounded space-y-2 bg-gray-50 mb-4';
      itemElement.dataset.index = index.toString();
      
      itemElement.innerHTML = `
        <div class="space-y-1">
          <label class="block text-sm font-medium text-gray-700">Title</label>
          <input
            type="text"
            value="${item.title || ''}"
            class="w-full border p-2 rounded item-title"
            data-index="${index}"
          />
        </div>
        
        <div class="space-y-1">
          <label class="block text-sm font-medium text-gray-700">Description</label>
          <input
            type="text"
            value="${item.description || ''}"
            class="w-full border p-2 rounded item-description"
            data-index="${index}"
          />
        </div>
        
        <div class="text-right">
          <button
            type="button"
            class="text-red-600 text-sm hover:underline remove-item"
            data-index="${index}"
          >
            Remove
          </button>
        </div>
      `;
      
      itemsContainer.appendChild(itemElement);
    });
    
    setupItemEventListeners();
  }
  
  // Update save button UI
  function updateSaveButtonUI() {
    if (saveButton) {
      saveButton.textContent = isSaving ? 'Saving...' : 'Save Changes';
      saveButton.disabled = isSaving;
    }
  }
  
  // Setup event listeners for dynamically created items
  function setupItemEventListeners() {
    // Title inputs
    document.querySelectorAll('.item-title').forEach(input => {
      input.addEventListener('input', (e) => {
        const index = e.target.dataset.index;
        updateItem(index, 'title', e.target.value);
      });
    });
    
    // Description inputs
    document.querySelectorAll('.item-description').forEach(input => {
      input.addEventListener('input', (e) => {
        const index = e.target.dataset.index;
        updateItem(index, 'description', e.target.value);
      });
    });
    
    // Remove buttons
    document.querySelectorAll('.remove-item').forEach(button => {
      button.addEventListener('click', (e) => {
        const index = e.target.dataset.index;
        removeItem(index);
      });
    });
  }
  
  // Initialize the component
  init();
</script>
