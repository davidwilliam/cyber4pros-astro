---
import type { HTMLAttributes } from 'astro/types';
import { findImage } from '~/utils/images';

export interface ImageProps extends HTMLAttributes<'img'> {
  src: string;
  alt: string;
  width?: number | string;
  height?: number | string;
  loading?: 'lazy' | 'eager';
  decoding?: 'async' | 'auto' | 'sync';
}

const props = Astro.props as ImageProps;

// Validate required props
if (!props.alt) {
  throw new Error('Image component requires an "alt" attribute');
}

// Process width and height if they're strings
const width = typeof props.width === 'string' ? parseInt(props.width) : props.width;
const height = typeof props.height === 'string' ? parseInt(props.height) : props.height;

// Set default values
const loading = props.loading || 'lazy';
const decoding = props.decoding || 'async';

// Get image from src
const _image = await findImage(props.src);

// Create image object
const image = typeof _image === 'string'
  ? { 
      src: _image,
      attributes: {} 
    }
  : null;

// Remove props that we've explicitly handled
const { src: _, alt: __, width: ___, height: ____, loading: _____, decoding: ______, ...restProps } = props;
---

{!image ? null : (
  <img
    src={image.src}
    alt={props.alt}
    width={width}
    height={height}
    loading={loading}
    decoding={decoding}
    crossorigin="anonymous"
    referrerpolicy="no-referrer"
    {...image.attributes}
    {...restProps}
  />
)}
