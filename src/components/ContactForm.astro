---
// src/components/ContactForm.astro

import { showToast } from '~/utils/toast';

export interface InputField {
  label: string;
  name: string;
  type: 'text' | 'email' | 'password' | 'number' | 'tel' | 'url' | 'search' | 'date' | 'time' | 'datetime-local' | 'month' | 'week' | 'color' | 'checkbox' | 'radio' | 'textarea';
  placeholder?: string;
  value?: string;
  required?: boolean;
  rows?: number;
}

export interface ContactFormProps {
  title: string;
  inputs: InputField[];
  textarea?: InputField;
  disclaimer?: string;
  button?: { label: string };
  description?: string;
  senderEmail: string;
  recipient: string;
}

const {
  title,
  inputs = [],
  textarea,
  disclaimer,
  button,
  description,
  senderEmail,
  recipient
} = Astro.props as ContactFormProps;

// Normalize label fields safely
function getLabel(value: any): string {
  return typeof value === 'string' ? value : value?.label || '';
}
---

<div class="flex flex-col max-w-xl mx-auto rounded-lg backdrop-blur border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 shadow p-4 sm:p-6 lg:p-8 w-full space-y-6">
  <form id="contact-form" class="space-y-4">
    {inputs.map((input: InputField, index: number) => (
      <div>
        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
          {getLabel(input.label)}
        </label>
        {input.type === 'textarea' ? (
          <textarea
            name={input.name}
            class="w-full border border-gray-300 dark:border-gray-600 rounded p-2 bg-white dark:bg-slate-800"
            rows={4}
          ></textarea>
        ) : (
          <input
            type={input.type as "text" | "email" | "password" | "number" | "tel" | "url" | "search" | "date" | "time" | "datetime-local" | "month" | "week" | "color" | "checkbox" | "radio"}
            name={input.name}
            class="w-full border border-gray-300 dark:border-gray-600 rounded p-2 bg-white dark:bg-slate-800"
            value={input.value || ''}
            placeholder={input.placeholder}
            required={input.required}
          />
        )}
      </div>
    ))}

    {textarea && (
      <div>
        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
          {getLabel(textarea.label)}
        </label>
        <textarea
          name={textarea.name}
          class="w-full border border-gray-300 dark:border-gray-600 rounded p-2 bg-white dark:bg-slate-800"
          rows={textarea.rows || 6}
          placeholder={textarea.placeholder}
        ></textarea>
      </div>
    )}

    {disclaimer && (
      <label class="flex items-start text-sm text-gray-600 dark:text-gray-400 space-x-2">
        <input
          type="checkbox"
          name="disclaimer"
          class="mt-1 border border-gray-300 dark:border-gray-600 rounded"
        />
        <span>{getLabel(disclaimer)}</span>
      </label>
    )}

    <button
      type="submit"
      class="w-full rounded-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3"
      id="submit-btn"
    >
      {getLabel(button?.label || 'Submit')}
    </button>

    {description && (
      <p class="text-sm text-gray-500 dark:text-gray-400 text-center">
        {getLabel(description)}
      </p>
    )}
  </form>
</div>

<script define:vars={{ title, senderEmail, recipient, getLabel }}>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('contact-form');
    const submitBtn = document.getElementById('submit-btn');
    
    if (!form || !submitBtn) return;
    
    const formData = {};
    
    // Add input change handlers
    form.querySelectorAll('input, textarea').forEach(input => {
      input.addEventListener('change', (e) => {
        const { name, value, type, checked } = e.target;
        formData[name] = type === 'checkbox' ? checked : value;
      });
    });
    
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      if (!submitBtn) return;
      
      submitBtn.disabled = true;
      submitBtn.textContent = 'Submitting...';
      
      try {
        // Gather form data
        const formElements = form.elements;
        const fields = [];
        
        // Process all form fields
        for (let i = 0; i < formElements.length; i++) {
          const element = formElements[i];
          
          // Skip buttons and elements without a name
          if (element.type === 'submit' || !element.name) continue;
          
          // Handle checkboxes differently
          const value = element.type === 'checkbox' ? element.checked : element.value;
          
          fields.push({
            label: element.name,
            value: value
          });
        }
        
        const response = await fetch('/api/contact', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            subject: 'Form Submission',
            formTitle: title,
            senderEmail,
            recipient,
            fields
          })
        });
        
        const result = await response.json();
        
        if (response.ok) {
          // Success
          import('~/utils/toast').then(({ showToast }) => {
            showToast('Form submitted successfully!', 'success');
          });
          form.reset();
        } else {
          // Error from server
          import('~/utils/toast').then(({ showToast }) => {
            showToast(result.error || 'An error occurred', 'error');
          });
        }
      } catch (err) {
        // Network or other error
        import('~/utils/toast').then(({ showToast }) => {
          showToast('An error occurred', 'error');
        });
      } finally {
        // Re-enable button
        submitBtn.disabled = false;
        submitBtn.textContent = getLabel(button?.label || 'Submit');
      }
    });
  });
</script>